name: Build and Test
on:
  push:
    branches: [ main ]
    paths:
      - src/client/**
      - .github/workflows/build-and-test.yml
  pull_request:
    branches: [ main ]
    paths:
      - src/client/**
      - .github/workflows/build-and-test.yml

env:
  DIRECTORY: src/client

defaults:
  run:
    working-directory: ${{ env.DIRECTORY }}

jobs:
  build:
    name: Run Pnpm Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v6
        with:
          directory: ${{ env.DIRECTORY }}

      - name: Build client
        run: pnpm build
        
  lint:
    name: Run linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v6
        with:
          directory: ${{ env.DIRECTORY }}
        
      - name: Run linting
        run: pnpm lint

  karma:
    name: Run Unittests and SonarCloud
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v6
        with:
          directory: ${{ env.DIRECTORY }}
        
      - name: Run Karma tests
        run: pnpm test

      - name: Copy coverage to correct path
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path . -Recurse -Filter lcov.info | Select-Object -First 1
          Copy-Item -Path $file.FullName -Destination ./coverage/

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: src
          args: >
            -Dsonar.organization=jjs98
            -Dsonar.projectKey=jjs98_jjsware
            -Dsonar.verbose=false
            -Dsonar.sources=client,server
            -Dsonar.tests=client,server
            -Dsonar.exclusions=**/node_modules/**,src/assets/**
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=client/coverage/lcov.info

  playwright:
    name: Run playwright tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v6
        with:
          directory: ${{ env.DIRECTORY }}
        
      - name: Install Playwright Browsers
        run: pnpm dlx playwright install --with-deps

      - name: Run Playwright tests
        run: pnpm dlx playwright test

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ${{ env.DIRECTORY }}/playwright-report
          retention-days: 10

  docker:
    name: Build and push docker image
    # needs: [build, lint, karma, playwright]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v6
        with:
          directory: ${{ env.DIRECTORY }}

      - name: Build client
        run: pnpm build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: jjs98/jjsware-client

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set tag for docker image
        id: tag
        run: |
          if [${{ github.event_name != 'pull_request' }}]
          then
              echo "tag=latest" >> $GITHUB_OUTPUT
          else
              echo "tag=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
          fi
        env:
          REF: ${{ github.ref }}

      - name: Build and push client
        uses: docker/build-push-action@v4
        with:
          context: ./${{ env.DIRECTORY }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.tag.outputs.tag }}